"""
Ayman Momin
UCID: 30192494
Assignment 3
CPSC 441
"""

import socket
import threading
import random
from datetime import datetime
import re

# Panda-themed data
PANDA_EMOJIS = ["üêº", "üéç", "üéã", "üåø", "üçÉ"]
PANDA_FACTS = [
    "Pandas spend around 14 hours a day eating bamboo! üå±",
    "Baby pandas are born pink and weigh only about 100 grams! üçº",
    "A group of pandas is called an embarrassment! üò≥",
    "Pandas have a 'thumb' (actually an extended wrist bone) to grip bamboo! üëç",
    "Newborn pandas are 1/900th the size of their mothers‚Äîsmaller than a stick of butter! üßà",
    "Pandas can poop up to **40 times a day** because bamboo is low in nutrients! üí©",
    "They have vertical slit pupils (like cats!) for better night vision! üòº",
    "Pandas are solitary animals and mark territory with scent glands! üëÉ",
    "Wild pandas live about 20 years, but in captivity, they live up to 30! üéÇ",
    "Pandas don‚Äôt hibernate‚Äîthey migrate to warmer areas instead! üåû",
    "Their black-and-white fur helps them blend into snowy mountains and dark forests! ‚ùÑÔ∏èüå≤",
    "Pandas can climb trees as early as 6 months old! üå≥",
    "Despite eating bamboo, their digestive system is designed for meat! ü•© (They just prefer bamboo!)",
    "Pandas can swim and use it to escape predators! üèä",
]

## taken from https://emojicombos.com/panda
PANDA_ASCII = {
    "hey": r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†â‚†â‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚†õ‚†ª‚†ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£§‚£ô‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢É‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚°ô‚†â‚†â‚†â‚†ô‚†ª‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢†‚£ø‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†ô
‚£ø‚°ø‚†ø‚†ø‚¢ø‚£ø‚£ø‚¢Ä‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†Ä‚†Ä‚†Ä‚¢†
‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚¢∏‚£∑‚£¥‚°á‚†Ä‚†Ä‚†ê‚†É‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†è‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚°Ü‚¢Ä‚£¥‚£ø
‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°ø‚†¶‚£§‚£§‚£æ‚£ø‚£ø‚†ô‚†õ‚¢ø‚£ø‚†Å‚¢†‚†Ä‚†Ä‚†à‚£ø‚£ø‚£ø‚°á‚£Ω‚£ø‚£ø
‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚¢ø‚£∂‚£æ‚£ø‚£ø‚£ø‚£Ñ‚†õ‚†Ä‚†∂‚†ñ‚£ø‚£Ü‚†à‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚†É‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£æ‚£ø‚£ø‚°ó‚¢∂‚£∂‚£ø‚°á‚£ø‚†É‚£º‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚†ª‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£π‚£ø‚†ü‚¢Å‚£æ‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚¢†‚£§‚£Ñ‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†â‚†Ä‚†∞‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°è‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚£§‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ü‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ä‚†Ä‚†à‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ã‚†Ä‚†Ä‚£∑‚£¶‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢®‚£≠‚£â‚£õ‚£õ‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚£Ä‚£Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£Ä‚£Ä‚£†‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
""",
    "sleeping": r"""
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£Ñ‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚£ø‚°ø‚£ø‚†ü‚¢ø‚°Ø‚£ø‚¢´‚°ó‚£¥‚£ø‚£ø‚°á
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚¢ø‚£∂‚£æ‚£¶‚£æ‚£∑‚£ø‚£∂‚£∑‚£æ‚†ø‚†ã‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ª‚°â‚†â‚†â‚†â‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£§‚£Ñ‚£†‚†§‚†¥‚†û‚†ì‚†∂‚†§‚£∂‚£∂‚£∂‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ª‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢†‚£æ‚£ø‚£∂‚°§‚¢¥‚†Å‚†Ä‚†Ä‚£†‚£¥‚£∂‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ò‚£ø‚†ã‚†Å‚†Ä‚£ø‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ü‚£ª‚£ø‚†á‚†Ä‚†Ä‚†ò‚¢ø‚£Ø‚£Ω‚£ø‚£Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢∞‚†É‚†Ä‚†Ä‚†Ä‚¢π‚†Ä‚†Ä‚†Ä‚†ª‚†ø‚†ø‚†ø‚†ã‚†Ä‚†Ä‚†ª‚†õ‚†Ä‚†â‚†â‚†Å‚£∏‚†Ä‚†Ä‚†Ä
‚£§‚£∂‚£º‚°Ä‚†Ä‚†Ä‚†Ä‚£º‚£ø‚£∑‚£∂‚£§‚£§‚£§‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£¥‚£ß‚°Ä‚†Ä‚†Ä
‚†ª‚†ø‚†ø‚†∑‚†§‚†§‚†§‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚£á‚†§‚†§‚†§‚†¥‚†∂‚†ø‚†ø‚†ø‚†ø‚†Å‚†Ä‚†Ä
""",
    "thanks": r"""
‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚†ø‚£ø‚°ø‚†ª‚£ø‚†ª‚£ø‚°ü‚°ø‚£ø‚†ü‚¢ø‚°ø‚£ø‚£ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£è‚£Ö‚¢†‚£æ‚†Ä‚†õ‚†Ä‚°ü‚†Ä‚†Ç‚†ô‚¢†‚†ò‚†Å‚°á‚°Ä‚¢¥‚£ø‚£∑‚°à‚¢ã‚°¥‚¢°‚£¶‚†à‚†Å‚£ø‚†â‚£ø
‚£ø‚£ø‚†ò‚£ø‚£Ä‚£ø‚£Ñ‚£Ä‚£ø‚£ø‚£Ä‚£∏‚£ß‚£∞‚£†‚£ø‚£Ñ‚£π‚£ø‚£á‚£∏‚£∑‚°ò‚†õ‚£†‚†ò‚†ü‚£†‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚¢õ‚£â‚£≠‚£≠‚£≠‚£≠‚£ç‚£â‚†õ‚¢ã‚£•‚£§‚£â‚†ª‚£ø‚£ø‚†°‚°¨‚¢π‚£ø
‚£ø‚£ø‚£ø‚†ø‚†ø‚°ø‚¢ã‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚°ü‚¢©‚£ç‚¢ø‚°Ü‚¢ª‚£ø‚£∑‚£∂‚£ø‚£ø
‚£ø‚°ü‚¢°‚£æ‚†ü‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚£≠‚£ø‚†á‚£º‚¢ü‚£ü‚†õ‚£õ‚†ª
‚£ø‚£á‚†π‚°ü‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£•‚†Ä‚£ø‚°∏‚£ø‚£ø‚°å‚¢É
‚£ø‚£ø‚£¶‚¢Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚¢π‚£ø‚£Æ‚£≠‚£µ‚£ø
‚£ø‚£ø‚£ø‚¢∏‚£ø‚°ø‚†ø‚£ø‚£ø‚°ø‚¢ø‚£ø‚£á‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚£∏‚°∞‚†¥‚£π‚£ø‚£ø
‚£ø‚£ø‚£ø‚†Ä‚£ø‚£Ø‚°§‚£¨‚°ü‚†á‚†π‚¢õ‚£ø‚£∑‚¢∫‚£ø‚£∑‚£ù‚£ø‚°ø‚£ø‚£ø‚†Å‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚†à‚£ø‚£ø‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ú‚£ø‚¢ø‚£ª‚†á‚¢∂‚£å‚¢•‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£∑‚£å‚†ô‚£Å‚°§‚°ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚¢°‚£∂‚£ø‚£ø‚°á‚¢∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∞‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£á‚†∏‚£ø‚£ø‚°ø‚¢É‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°à‚¢ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¨‚°Ö‚†ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
""",
    "shy": r"""
    ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚°§‚†∂‚†∂‚†í‚†í‚†í‚†í‚¢≤‚£¥‚£∂‚£∂‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£ø‚°ø‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚¢ø‚£ø‚£ø‚¢¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢†‚°æ‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£∑‚†Ä‚†Ä‚¢†‚£ø‚£ø‚£ø‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚†ü‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚°ø‚†§‚†§‚†à‚¢ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚°ü‚†Å‚£∂‚£∂‚°Ü‚†Ä‚†à‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†π‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†ò‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ß‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚¢π‚°Ñ‚†Ä‚†Ä‚†Ä‚†ô‚¢¶‚†Ä‚¢†‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£æ‚£ø‚£ã‚£ø‚£Ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£æ‚£ø‚¢∂‚£¶‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£¥‚†æ‚£ü‚†õ‚¢ª‚†ø‚°è‚†Å‚¢ø‚°Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£æ‚£ø‚¢ø‚£¥‚°Ñ‚¢à‚°ô‚†õ‚†õ‚†∑‚†∂‚†∂‚†∂‚†æ‚†ø‚†õ‚£õ‚£Ø‚£•‚£æ‚†ø‚†ê‚†Ä‚†Ä‚†Å‚°Ä‚¢π‚£ß‚†Ä‚†Ä
‚†Ä‚£∏‚£Ø‚£ø‚£Ü‚£∏‚£∑‚†à‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£Ø‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚°Ü‚†Ä
‚¢∞‚£ø‚†Ä‚£ø‚°º‚°á‚£ø‚£Ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°Ñ‚¢Ä‚£æ‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£ø‚£ø‚£∑‚†Ä
‚¢∏‚£ø‚†Ä‚°ü‚¢∏‚†Ä‚†à‚¢ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢Ç‚£æ‚†è‚†Å‚†Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ò‚£ø‚£ø‚†ø‚°Ñ
‚¢∏‚£ø‚†Ä‚°ó‚†Ä‚†ê‚†Ä‚£¶‚°ø‚£∑‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£†‚£ø‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢°‚£æ‚†ã‚†Ä‚†Ä‚£ß
‚†à‚£ø‚°Ñ‚¢∑‚£¨‚†Ä‚†ê‚†É‚°à‚†ø‚£Ø‚°â‚†â‚†â‚†â‚£Ω‚£ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£æ‚†ã‚†Ä‚†Ä‚†Ä‚£ø
‚¢†‚°ü‚£ø‚°Å‚°ø‚†Ä‚†Ä‚†Ä‚†Ä‚†¢‚†ú‚¢∑‚°Ñ‚£†‚°æ‚£ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£∂‚†ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚£ø
‚¢∏‚°á‚†à‚†ª‚£¶‚°Ä‚†Ä‚¢Ä‚£Ä‚†∞‚£¶‚£å‚£ø‚°ü‚¢ò‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚°º‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ü
‚†Ä‚¢±‚£Ä‚†Ä‚†à‚†ª‚¢¶‚£Ñ‚£ê‚£∫‚£∑‚£ø‚°ü‚†ª‚£ø‚£•‚£§‚£§‚°∂‚†æ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚†Å
‚†Ä‚†Ä‚¢ø‚£∑‚£¶‚£Ñ‚£Ä‚†à‚†â‚†ô‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£∂‚£ü‚£ª‚°ü‚†Ä
‚†Ä‚†Ä‚†à‚¢ø‚£∑‚£ø‚£ü‚†õ‚†∂‚†∂‚¢∂‚£§‚£§‚£§‚£§‚£†‚£§‚£§‚£§‚£§‚£§‚£¥‚£∂‚°æ‚†õ‚£ª‚£ø‚£ø‚£ø‚°ü‚†Å‚†Ä
‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚°ø‚¢∏‚£∑‚°Ñ‚£§‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†à‚¢Ä‚£Ä‚£Ä‚†Ä‚°ø‚£´‚¢ª‚£ø‚†ø‚£∑‚°ü‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ø‚°Ä‚¢®‚£Ñ‚°ª‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°õ‚†Ä‚†à‚†â‚£â‚£Ä‚†Ä‚†Ä‚†ò‚£ø‚£∂‚£ø‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚£Ä‚°ô‚†ª‚†∑‚¢∂‚£∂‚£∂‚£¥‚£ø‚£∂‚£∂‚†ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚£π‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£≤‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚¢ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∏‚£ø‚£∂‚£¶‚£¶‚£§‚£º‚£≠‚£ø‚†Ä‚¢†‚£Ö‚£Ä‚£Ç‚£∞‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ø‚£ø‚£Ω‚£Ø‚£ø‚£ø‚†û‚†õ‚†∑‚£∂‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
""",
"dab": r"""
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚°Ä‚††‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∂‚¢ß
‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†î‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£•‚†¶‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°à‚£†‚£á‚£∏
‚†Ä‚†Ä‚¢Ä‚†å‚†Ä‚†Ä‚¢†‚†ñ‚†Ä‚†Ä‚†Ä‚†¥‚¢ø‚£û‚°ª‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚°∂‚°ü‚£ø‚£ø‚†ü
‚†Ä‚£†‚£¶‚£§‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†â‚£á‚£§‚£¥‚†í‚†ö‚°ø‚£ß‚£§‚£¨‚£ø‚°ø‚†ã‚†Å‚†Ä
‚£º‚£ø‚°ü‚¢ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢Ä‚£ø‚£á‚£π‚£Ä‚£∂‚£ø‚£ø‚°ø‚†ã‚†Å‚°Ç‚†Ä‚†Ä‚¢Ä
‚†ô‚†ø‚†∑‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£∑‚£∂‚£Ä‚£º‚£ø‚£ø‚£ø‚£ø‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†á‚†Ä‚†Ä‚†Ö
‚†Ä‚†Ä‚†Ä‚†ò‚¢Ñ‚†Ä‚£æ‚£ø‚°ø‚¢Ä‚£®‚£Ω‚†õ‚†â‚£ø‚£ø‚¢ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚°É
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†ø‚†ø‚†æ‚†ø‚†å‚†Ä‚£Ä‚£ø‚†ü‚†Å‚†Ä‚†â‚°ã‚†±‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚°ê‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£Ä‚£í‚£Ä‚£∞‚£¥‚°æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚°ò‚°Ä‚¢∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ç‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ô‚†ì‚†õ‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†É‚°Ä‚°Ü‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ê‚¢Ä‚†¢‚†Ä‚£∏‚†Ä‚†Ä‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚¢Ä‚£º‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚†ø‚¢ª‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£º‚°ã‚†Ä‚†ô‚¢∂‚£§‚£§‚£Ñ‚†§‚†§‚†§‚¢∂‚£Ø‚£•‚¢Ñ‚†Ä‚£æ‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚†Å‚£Ä‚£¥‚£ø‚†ü‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ô‚¢ø‚£∑‚£ø‚¢ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚£ø‚£§‚¢ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ñ‚£∂‚£Ñ‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†ò‚†ø‚†ø‚†∑‚†ø‚†ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ø‚£ø‚†ø‚†ø‚†ø‚†ã‚†Ä‚†Ä‚†Ä
""",
"swag": r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢®‚£ø‚£ø‚£∂‚£Æ‚°ù‚†ã‚†Ä‚†à‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚°ø‚¢â‚°ù‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚£Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£å‚°¢‚°ò‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ü‚†õ‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†É‚†ª‚£¶‚£ª‚£ø‚£ø‚£ø‚°ø‚£∏‚°ü‚¢ª‚£ø‚£ø‚†ª‚¢ø‚£ø‚£ø‚£ø‚†ã‚†ª‚£ß‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†õ‚¢ã‚£â‚°•‚†î‚†ä‚¢â‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚¢∫‚†õ‚†ø‚£º‚£ø‚£ß‚£ø‚°Ä‚£∏‚£ø‚£á‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚†Ä‚†Ä‚†à‚†à‚†ª‚£ø‚£ø‚£ø‚£ø‚†ø‚†á‚†Ä‚¢ø‚£á‚†Ä‚†Ä‚¢Ä‚£æ‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚°Ü‚£§‚£æ‚†Ü‚†Ä‚†à‚†ô‚†õ‚†â‚¢ª‚°ø‚†ø‚£ø‚£¶‚£¥‚£æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚°è‚†Ä‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†≥‚†¥‚†ø‚†ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†∑‚†ê‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚¢Ä‚£†‚£Ä‚†Ä‚†Ä‚£Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚†∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢á‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢´‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢®‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†è‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£≠‚£•‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£§‚£§‚£§‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ñ‚£Ä‚£†‚£¥‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø‚†ø
""",
"shocked": r"""
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†õ‚†ã‚†â‚†õ‚†õ‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚†ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚°õ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚£Ñ‚†Ä‚¢†‚°Ñ‚†Ä‚¢†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ß‚°Ä‚†Ä‚†Ä‚£∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚¢Ñ‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£æ‚°π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°Ä‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢£‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†ã‚†Ä‚†Ä‚†à‚†â‚†â‚†ò‚†ª‚£ø‚£ø‚£∑‚°π‚£ø‚°ø‚†õ‚†õ‚†â‚†â‚†ô‚†ø‚£∑‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢£‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚£ª‚°á‚†Ä‚£†‚£∂‚£∂‚£∂‚£Ñ‚°Ä‚†Ä‚†Ä‚†à‚°õ‚¢ø‚°á‚†Ä‚†Ü‚£†‚£§‚£∂‚£∂‚£¶‚°Ä‚¢π‚£ß‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢£‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚†Ä‚†à‚†Å‚†â‚†°‚†î‚†Æ‚¢ç‚¢≥‚£Ñ‚†Ä‚†Ä‚£∏‚°á‚¢†‚°æ‚†ü‚†©‚†≠‚†≠‚°ô‚†á‚£∏‚£ø‚£á‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚¢á‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚£∂‚†ã‚†©‚¢≥‚†Ä‚¢π‚£á‚°ú‚£ø‚£á‚¢ß‚†Ä‚†∞‚†ä‚†â‚¢≥‚°Ä‚†Ä‚†∏‚£ø‚£ø‚£¶‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚°ü‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Å‚¢†‚£Ñ‚†Ä‚†ë‚†§‚£Ñ‚°†‚†ú‚†Ä‚£æ‚£ø‚°ü‚†π‚£ø‚°é‚£ß‚†ê‚†§‚¢§‚°º‚†É‚£¥‚°ß‚†ô‚£ø‚£ø‚£ß‚¢π‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚¢≥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†à‚†ô‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚£ø‚†ã‚†Å‚¢Ä‚£Ω‚£ß‚°π‚£ß‚°Ä‚†Ä‚††‚†¥‚†õ‚°á‚†Ä‚¢∏‚£ø‚£ø‚°á‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£§‚£Ä‚£õ‚£í‚£í‚£†‚£¥‚£ø‚£ø‚¢£‚£æ‚°ó‚†õ‚†ø‚£ø‚£ø‚°é‚£ø‚£¶‚£§‚£Ä‚£ê‚£Å‚£§‚£ø‚£ø‚£ø‚£ß‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚£ø‚°á‚†Ä‚†â‚†Ä‚†Ä‚†Ä‚¢à‚†Å‚¢Ä‚£ß‚°π‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚£Ω‚£ø‚£ø‚†ü‚£ã‚£µ‚£ø‚£ø‚°ø‚†ñ‚°Ä‚£Ä‚£†‚£∂‚£π‚£ñ‚°ô‚¢ø‚£ø‚£¶‚†â‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°ú‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ü‚£´‚†Å‚£¥‚†ø‚†ü‚†â‚†Ä‚†à‚†Å‚†Ç‚†ô‚°Ü‚£ò‚°ª‚£∑‚†π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†ò‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£ø‚£ø‚†ã‚£¥‚£ø‚£á‚£∏‚£Å‚¢Ä‚°§‚¢§‚£§‚£§‚£¥‚†∂‚£§‚£Ñ‚¢∏‚£ø‚£º‚°û‚£ø‚£ø‚£ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚£ø‚†á‚†Ä‚†Ä‚†à‚†ô‚†ø‚£ø‚£ø‚£ø‚£ø‚£è‚†ø‚£ø‚°è‚†Ä‚†ª‚†ç‚¢ª‚£ø‚£ø‚¢∑‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚£ø‚°ø‚£ª‚†Ø‚¢π‚£ø‚£ø‚¢ø‚°ü‚¢∏‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚£ø‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†õ‚†ø‚£ø‚£ø‚£∑‚£ø‚£ø‚°Ü‚†Ä‚†Ä‚†Ä‚¢ª‚£¶‚£¥‚£∂‚£∂‚£ø‚°ü‚£ª‚£ø‚£ø‚£º‚†ã‚¢Ä‚£æ‚£ø‚°∑‚†ã‚†Ä‚†ò‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø
‚£ø‚£ø‚£ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ø‚¢ø‚£ø‚£¶‚£Ä‚†Ä‚†Ä‚†â‚†ã‚†ô‚†õ‚†õ‚†Ä‚†à‚†ô‚†ã‚¢Å‚£¥‚£ø‚†ü‚†ã‚¢Ä‚£†‚£§‚£∑‚°à‚†ª‚£ø‚£ø‚£ø‚£ø
‚£ø‚°ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ô‚†õ‚†í‚††‚†Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°¥‚†æ‚†ü‚†ã‚†Å‚†Ä‚¢§‚£º‚£ø‚£ø‚£ø‚†õ‚°Ñ‚†ô‚£ø‚£ø‚£ø
‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°Ä‚¢ª‚£ø‚£ø‚†Ñ‚†Ä‚†Ä‚†Ä‚†ò‚£ø‚£ø
‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ò‚†ø‚£Ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø
‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£¥‚£¶‚£Ø‚£æ‚£∑‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚£ø‚£ø‚£∑‚£∂‚£¶‚£¥‚£§‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø
""",
}

class PandaServer:
    def __init__(self, host='127.0.0.1', port=5555):
        self.host = host
        self.port = port
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.clients = []  # List of (client_socket, username)
        self.lock = threading.Lock()
        self.master_log = "server_master.log"
        
        # Initialize master log
        with open(self.master_log, "a") as f:
            f.write(f"\n=== Server started at {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ===\n")

    def log_master(self, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with self.lock:
            with open(self.master_log, "a", encoding="utf-8") as f:  # Add encoding="utf-8"
                f.write(f"[{timestamp}] {message}\n")

    def log_client(self, log_filename, message):
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        with open(log_filename, "a", encoding="utf-8") as f:  # Add encoding="utf-8"
            f.write(f"[{timestamp}] {message}\n")
            
    def start(self):
        self.server.bind((self.host, self.port))
        self.server.listen()
        print(f"Server is listening on {self.host}:{self.port}...")
        while True:
            client_socket, addr = self.server.accept()
            threading.Thread(target=self.handle_client, args=(client_socket,)).start()
    
    def handle_client(self, client_socket):
        username = client_socket.recv(1024).decode('utf-8')
        
        # Check if the username is already connected
        with self.lock:
            existing_users = [user[1] for user in self.clients]
            if username in existing_users:
                client_socket.send("‚ùå This panda name is already in the grove!".encode())
                client_socket.close()
                return  # Prevent duplicate connections
        
        # Create client-specific log
        safe_username = re.sub(r'[^a-zA-Z0-9]', '_', username)
        client_log = f"client_{safe_username}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
        
        with self.lock:
            self.clients.append((client_socket, username, client_log))
        
        # Log connections
        self.log_master(f"{username} joined the chat")
        self.log_client(client_log, f"Connected to server as '{username}'")

        self.broadcast(f"{PANDA_EMOJIS[0]} {username} joined the grove!", exclude=client_socket)

        try:
            while True:
                try:
                    message = client_socket.recv(1024).decode('utf-8')
                    if not message:
                        break
                    
                    # Log message/command
                    self.log_master(f"{username} sent: {message}")
                    self.log_client(client_log, f"You sent: {message}")

                    if message.startswith('@'):
                        # Pass client_log to handle_command
                        self.handle_command(client_socket, message, username, client_log)
                    else:
                        self.broadcast(f"{random.choice(PANDA_EMOJIS)} {username}: {message}")
                except OSError: # Catch socket closure errors
                    break
        except ConnectionResetError:
            pass # Already handled by OSError
        finally:
            self.remove_client(client_socket, username, client_log) # Ensure cleanup
    
    
    def handle_command(self, client_socket, command, username, client_log): 
        if command.startswith('@bonus'):
            parts = command.split(' ', 1)
            if len(parts) == 2:
                keyword = parts[1].lower()
                ascii_art = PANDA_ASCII.get(keyword)
                if ascii_art:
                    self.broadcast(f"{username}:\n{ascii_art}")
                    self.log_client(client_log, f"Shared ASCII art for '{keyword}'")
                else:
                    client_socket.send(f"üêº No ASCII found for this mood! Try: {PANDA_ASCII.keys()}".encode())
                    self.log_client(client_log, f"Failed to find ASCII art for '{keyword}'")
            else:
                client_socket.send("‚ùå Usage: @bonus <key>".encode())
        elif command == '@bamboo':
            fact = random.choice(PANDA_FACTS)
            client_socket.send(f"üìö Panda Fact: {fact}".encode('utf-8'))
            self.log_client(client_log, f"Received panda fact: {fact}")
        elif command == '@grove':
            users = [user[1] for user in self.clients]
            client_socket.send(f"üåø Connected Pandas: {', '.join(users)}".encode('utf-8'))
        elif command == '@leaves':
            # Notify client to close gracefully (DO NOT call remove_client here)
            client_socket.send("üçÇ You have left the grove. Farewell!".encode('utf-8'))
        else:
            client_socket.send("‚ùå Invalid command!".encode('utf-8'))

    def remove_client(self, client_socket, username, client_log):
        with self.lock:
            self.clients = [c for c in self.clients if c[0] != client_socket]  # Compare socket
        client_socket.close()
        
        # Log disconnection
        self.log_master(f"{username} left the chat")
        self.log_client(client_log, "Disconnected from server")
        self.broadcast(f"üçÇ {username} left the grove...")
        
    def broadcast(self, message, exclude=None):
        with self.lock:
            for entry in self.clients:  # Iterate over tuples with 3 elements
                client = entry[0]      # First element is client_socket
                username = entry[1]    # Second is username
                if client != exclude:
                    try:
                        client.send(message.encode('utf-8'))
                    except:
                        continue

if __name__ == "__main__":
    server = PandaServer()
    server.start()